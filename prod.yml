version: '3'
services:
  app:
    container_name: cr_app
    env_file: ./envs/prod.env
    image: ${DOCKER_REGISTRY}/courselets
    command: ["prod"]
    volumes:
      # APP_PWD=/courselets/app
      - ${APP_PWD}/settings/local.py:/home/courselets/app/mysite/mysite/settings/local.py
      - ${APP_PWD}/logs:/home/courselets/app/logs
      - ${APP_PWD}/static:/home/courselets/app/mysite/static
    ports:
      - "9000:9000"
    restart: on-failure
    links:
      - postgres
      - mongo
      - memcached
      - celery
    environment:
      - DOCKER_REGISTRY

  postgres:
    container_name: cr_postgres
    image: postgres:9.6
    env_file: ./envs/prod.env
    restart: on-failure
    volumes:
      - cr_db:/var/lib/postgresql/data/

  mongo:
    container_name: cr_mongo
    image: mongo:latest
    expose:
      - "27017"
    volumes:
      - cr_mongo:/data/db
    restart: on-failure

  memcached:
    container_name: cr_memcached
    image: memcached:latest
    restart: on-failure

  celery:
    container_name: cr_celery
    image: ${DOCKER_REGISTRY}/courselets
    command: celery worker --config ../.conf/celery/celeryconfig.py -A mysite --loglevel=INFO -B
    env_file: ./envs/prod.env
    volumes:
      - ${APP_PWD}/logs:/home/courselets/app/logs
      - ${APP_PWD}/settings/local.py:/home/courselets/app/mysite/mysite/settings/local.py
    links:
      - rabbit
      - redis
    restart: on-failure
    environment:
      - DOCKER_REGISTRY
      - CELERY_BROKER_URL=amqp://guest@rabbit

  rabbit:
    container_name: cr_rabbit
    image: rabbitmq:latest
    restart: on-failure

  redis:
    container_name: cr_redis
    image: redis:latest
    restart: on-failure

volumes:
  cr_db:
  cr_mongo:
