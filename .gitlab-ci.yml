image: docker:latest

variables:
  DOCKER_DRIVER: overlay2

services:
- docker:dind

before_script:
- docker info
- docker ps

stages:
  - build
  - test
  - tag
  - deploy
  - smoke

Build:
  stage: build
  tags:
    - docker
  script:
    - docker build -f Dockerfile -t $DOCKER_IMG_NAME:$CI_COMMIT_SHA .
    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
    - docker push $DOCKER_IMG_NAME:$CI_COMMIT_SHA

JavaScript tests:
  stage: test
  tags:
    - docker
  script:
    - docker build -f Dockerfile-test.node -t node-test:$CI_COMMIT_SHA . && docker run node-test:$CI_COMMIT_SHA

Python tests:
  stage: test
  tags:
    - docker
  script:
    - docker run -d --name mongo -p 27017:27017 mongo:latest
    - docker run --link mongo:mongo $DOCKER_IMG_NAME:$CI_COMMIT_SHA make coverage
  after_script:
    - docker rm -f mongo

Check code quality:
  stage: test 
  tags:
    - docker
  script:
    - docker run $DOCKER_IMG_NAME:$CI_COMMIT_SHA make quality

Tag tested development image:
  stage: tag
  tags:
    - docker
  only:
    - development
  script:
    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
    - docker build -f Dockerfile.celery -t maxsocl/cr.celery:development .
    - docker push maxsocl/cr.celery:development
    - docker pull $DOCKER_IMG_NAME:$CI_COMMIT_SHA
    - docker tag $DOCKER_IMG_NAME:$CI_COMMIT_SHA maxsocl/courselets:development
    - docker push maxsocl/courselets:development

Tag tested staging image:
  stage: tag
  tags:
    - docker
  only:
    - master
  script:
    - docker login -u $DOCKER_USERNAME -p $DOCKER_PASSWORD
    - docker build -f Dockerfile.celery -t maxsocl/cr.celery:master .
    - docker push maxsocl/cr.celery:master
    - docker pull $DOCKER_IMG_NAME:$CI_COMMIT_SHA
    - docker tag $DOCKER_IMG_NAME:$CI_COMMIT_SHA maxsocl/courselets:master
    - docker push maxsocl/courselets:master

Deploy Dev:
  stage: deploy
  tags:
    - stage
    - deploy
    - ssh
  environment:
    name: development
    url: https://dev.courselets.org
  only:
    - development
  script:
    - cd /home/wwwapps/dev/socraticqs2/
    - git fetch
    - git reset --hard origin/development
    - docker-compose -f dev.yml pull dev_app
    - docker-compose -f dev.yml pull dev_celery
    - docker-compose -f dev.yml up -d dev_app
    - make .migrate env=dev
    - make .fsm-deploy env=dev
    - docker ps
    - curl "$SLACK_WEBHOOK_URL" -d 'payload={"text":"Development has been successfully deployed https://dev.courselets.org\n```\n'"$CI_COMMIT_MESSAGE"'\n```\n@redilonka (・ω・)", "link_names":1}'

Run layout tests:
  stage: smoke 
  tags:
    - docker
  only:
    - development
    - master
  script:
    - docker run maxsocl/backstop:development

Deploy Stage:
  stage: deploy
  tags:
    - stage
    - deploy
    - ssh
  only:
    - master
  script:
    - cd /home/wwwapps/socraticqs2/
    - git checkout master
    - git pull
    - source /home/wwwapps/_ve_socraticqs3/bin/activate
    - pip install --ignore-installed -U -r requirements.txt
    - pip install --ignore-installed -U -r requirements/prod.txt
    - cd mysite/
    - python manage.py migrate
    - python manage.py fsm_deploy
    - cd draw_svg/
    - npm install --save-dev
    - npm run build && npm run build:copy-local
    - yarn build && yarn build:copy-local
    - cd ..
    - python manage.py collectstatic --noinput
    - sudo supervisorctl restart gunicorn
    - sudo supervisorctl restart celery
    - curl "$SLACK_WEBHOOK_URL" -d 'payload={"text":"Staging has been successfully deployed https://staging.courselets.org\n@redilonka (・ω・)", "link_names":1}'
    - curl "$CR_SLACK_WEBHOOK_URL" -d 'payload={"text":"Staging has been successfully deployed https://staging.courselets.org\n@here", "link_names":1}'
